(function () {    'use strict';angular.module('App').factory('LibGridService', ['$http', function($http) {  function LibGridService () {    this.http = $http;    //по умолчанию    this.pageOpts = {      pageIndex: 1,      pageSize: 50,      pageSizes: [5, 10, 25, 50],      externalPaging: true    };    this.sortOpts = {      enableSorting: true,      externalSorting: true    };    this.api = {};    this.uiConf = {};    this.filters = {};    this.sort    = {};    this.page    = {      pageIndex: this.pageOpts.pageIndex,      pageSize:  this.pageOpts.pageSize    };  }  LibGridService.prototype.init = function (columns, api, conf) {    if (conf) {      this.applyConf(this.pageOpts, conf.pageOpts);      this.applyConf(this.pageOpts, conf.sortOpts);    }    this.initUiConf(columns, api);    this.api = api;    return this.uiConf;  }  LibGridService.prototype.applyConf = function (opts, conf) {    if (!conf) {      return;    }    for (var name in opts) {      if (conf[name] !== undefined) {        opts[name] = conf[name];      }    }  }  LibGridService.prototype.initUiConf = function (columns, api) {    //columns    this.uiConf.columnDefs = columns;    //pagination    this.uiConf.paginationPageSize    = this.pageOpts.pageSize;    this.uiConf.paginationPageSizes   = this.pageOpts.pageSizes;    this.uiConf.useExternalPagination = this.pageOpts.externalPaging;    //sorting    this.uiConf.useExternalSorting    = this.sortOpts.externalSorting;    this.uiConf.enableSorting = this.sortOpts.enableSorting;    //page and sort api    var gridSrv = this;    this.uiConf.onRegisterApi = function(gridApi) {      self.gridApi = gridApi;      self.gridApi.core.on.sortChanged(null, function(grid, sortColumns) {        if (sortColumns.length == 0) {          gridSrv.sort = {};        } else {          gridSrv.sort.field = sortColumns[0].field;          gridSrv.sort.dir = sortColumns[0].sort.direction;          gridSrv.load();        }      });      if (gridApi.pagination) {        gridApi.pagination.on.paginationChanged(null, function (pageIndex, pageSize) {          gridSrv.page.pageSize  = pageSize;          gridSrv.page.pageIndex = pageIndex;          gridSrv.load();        });      }    }  }  LibGridService.prototype.load = function () {    var gridSrv = this;    var params = {      start: this.page.pageIndex,      limit: this.page.pageSize,      sort: this.sort.field,      dir: this.sort.dir    };    if (!params.sort) {      params.sort = 'id';    }    if (!params.dir) {      params.dir = 'DESC';    }    if (this.filters) {        for (var param in this.filters) {            params[param] = this.filters[param];        }    }    this.http.post(this.api.load, params)      .then(function (res){        var items = res.data.res;        gridSrv.uiConf.data = items.data;        gridSrv.uiConf.totalItems = items.total;      });  }  LibGridService.prototype.setFilter = function (name, value) {    this.filters[name] = value;  }  LibGridService.prototype.setFilterKeyPress = function (e, name, value) {    if (e.keyCode == 13) {      this.setFilter(name, value);      return true;    }    return false;  }  return LibGridService;}]);})();